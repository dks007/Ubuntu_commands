from sshtunnel import SSHTunnelForwarder
from elasticsearch import Elasticsearch

# SSH tunnel connection details
ssh_host = 'your.ssh.host.address'
ssh_username = 'your_ssh_username'
ssh_password = 'your_ssh_password'
remote_elasticsearch_host = 'localhost'  # Assuming ES is running on localhost relative to the server
remote_elasticsearch_port = 9200  # Default ES port

# Local port to forward Elasticsearch requests to (choose any free port on your local machine)
local_bind_port = 12345

# Setup the SSH tunnel
with SSHTunnelForwarder(
    (ssh_host, 22),  # SSH server connection details
    ssh_username=ssh_username,
    ssh_password=ssh_password,
    remote_bind_address=(remote_elasticsearch_host, remote_elasticsearch_port),
    local_bind_address=('localhost', local_bind_port)  # Local forwarding address and port
) as tunnel:
    # Elasticsearch connection details with credentials
    es_username = 'your_es_username'
    es_password = 'your_es_password'
    
    # Now we create an Elasticsearch client configured to use the forwarded port
    es = Elasticsearch(
        hosts=[{'host': 'localhost', 'port': local_bind_port}],
        basic_auth=(es_username, es_password),
        scheme="http"  # or "https" based on your ES setup
    )
    
    # Define your query here
    query = {
        "query": {
            "match_all": {}
        }
    }
    
    # Execute the query
    result = es.search(index="your_index_name", body=query)
    
    # Do something with the result
    print(result)

# The SSH tunnel is automatically closed here when exiting the 'with' block
